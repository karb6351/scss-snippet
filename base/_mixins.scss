/*-----------------------------position mixins-----------------------------*/

//i.e the $args should be something like this: left 1em top 1.5em
//one direction follow by one value

@mixin position($position, $args) {
  $offsets: top right bottom left;
  @each $offest in $offsets {
    $i: index($args, $offest);
    @if $i and $i + 1 <= length($args) and type-of( nth($args, $i + 1) ) == number {
      #{$offest}: nth($args, $i + 1);
    }
  }
  position: $position;
}

//absolute
@mixin absolute($args) {
  @include position(absolute, $args);
}

//fixed
@mixin fixed($args) {
  @include position(fixed, $args);
}

//relative
@mixin relative($args) {
  @include position(relative, $args);
}

//sticky
@mixin sticky($args) {
  @include position(sticky, $args);
}


/*-----------------------------transforms mixins----------------------------*/
// It is supports mutil transforms thought transform function
// i.e @include transform(scale(1.5) rotate(180deg))
// The transform-origin function should include separatly
// i.e @include rotate(180deg)
//     @include transform-origin(top left)

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

//transform origin
@mixin transform-origin ($origin) {
  -moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}

// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}
// scale
@mixin scale($scale) {
	 @include transform(scale($scale));
}
// translate
@mixin translate($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
